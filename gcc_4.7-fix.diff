Index: plugin/dwarf/type_adapter.cpp
===================================================================
--- plugin/dwarf/type_adapter.cpp	(revision 69011)
+++ plugin/dwarf/type_adapter.cpp	(working copy)
@@ -124,6 +124,25 @@
 namespace
 {
     using namespace Dwarf;
+    
+    template<typename T>
+    void throw_null_type(const char* msg, const T& die)
+    {
+        assert(msg);
+        assert(die.name());
+
+        string err = "null type for ";
+        err += msg;
+        err += ": ";
+        if (die.type())
+        {
+            err += die.type()->name();
+            err += " ";
+        }
+        err += die.name();
+
+        throw logic_error(err);
+    }
 
     /**
      * Function object which aggregates a base class or
@@ -203,26 +222,6 @@
         Dwarf::TypeMap&         typeMap_;
         TypeSystem*             typeSys_;
     };
-
-
-    template<typename T>
-    void throw_null_type(const char* msg, const T& die)
-    {
-        assert(msg);
-        assert(die.name());
-
-        string err = "null type for ";
-        err += msg;
-        err += ": ";
-        if (die.type())
-        {
-            err += die.type()->name();
-            err += " ";
-        }
-        err += die.name();
-
-        throw logic_error(err);
-    }
 } // namespace
 
 
Index: zdk/include/generic/visitor.h
===================================================================
--- zdk/include/generic/visitor.h	(revision 69011)
+++ zdk/include/generic/visitor.h	(working copy)
@@ -106,7 +106,7 @@
         {
             return p->visit(host);
         }
-        return default_accept_impl(host, guest);
+        return Visitable::default_accept_impl(host, guest);
     }
 };
 
@@ -125,7 +125,7 @@
         {
             return p->visit(host);
         }
-        return default_accept_impl(host, guest);
+        return ConstVisitable::default_accept_impl(host, guest);
     }
 };
 
Index: zdk/include/zdk/type_tags.h
===================================================================
--- zdk/include/zdk/type_tags.h	(revision 69011)
+++ zdk/include/zdk/type_tags.h	(working copy)
@@ -138,6 +138,13 @@
     static const Variant::TypeTag tag = Variant::VT_UINT64;
 };
 
+#if (__WORDSIZE == 64)
+template<> struct type_tag<long long unsigned int>
+{
+    static const Variant::TypeTag tag = Variant::VT_UINT64;
+};
+#endif
+
 template<> struct type_tag<void*>
 {
     static const Variant::TypeTag tag = Variant::VT_POINTER;
Index: plugin/gui/program_view.cpp
===================================================================
--- plugin/gui/program_view.cpp	(revision 69011)
+++ plugin/gui/program_view.cpp	(working copy)
@@ -124,9 +124,9 @@
 )
 {
     size_t n = 0;
-    if (ViewPtr view = find_page(sym, n))
+    if (ViewPtr tmpview = find_page(sym, n))
     {
-        view->set_elements_in_view(sym, thread, frame, hilite, viewType);
+        tmpview->set_elements_in_view(sym, thread, frame, hilite, viewType);
     }
     else
     {
Index: target/ucontext386.h
===================================================================
--- target/ucontext386.h	(revision 69011)
+++ target/ucontext386.h	(working copy)
@@ -60,7 +60,7 @@
     {
         // old-style signal handler?
 
-        gregset32_t& gregs = uc.uc_mcontext.gregs;
+        const gregset32_t& gregs = uc.uc_mcontext.gregs;
         thread_read(thread, f.stack_pointer() + 4, gregs);
     }
 
Index: zdk/include/zdk/thread_util.h
===================================================================
--- zdk/include/zdk/thread_util.h	(revision 69011)
+++ zdk/include/zdk/thread_util.h	(working copy)
@@ -94,7 +94,7 @@
             size_t nwords = round_to_word(sizeof(T));
             std::vector<word_t> buf(nwords);
             t.read_data(a, &buf[0], nwords, np);
-            memcpy(&v, &buf[0], sizeof(T));
+            memcpy((void*) &v, &buf[0], sizeof(T));
         }
     };
 
